/*
    JOIN 실습 
        member10 : 회원정보를 저장하는 테이블 
        zipcode10 : 우편번호를 저장하는 테이블 
        product10 : 제품 정보를 저장하는 테이블 
        order10 : 주문 정보를 저장하는 테이블 
*/

-- 테이블 삭제  : FOREIGN KEY 가 참조하는 테이블은 삭제되지 않는다
--  1.참조하는 테이블이 없어야 삭제가 가능하다 .
-- 2 .테이블 삭제시 CASCADE CONSTREAINTS 옵션을 사용해서 강제삭제

DROP TABLE SCHEMA_ORDER10.table_ORDER10;

DROP TABLE ORDER10 CASCADE CONSTRAINTS;

DROP TABLE MEMBER7;
DROP TABLE ORDER10;
DROP TABLE PRODOUCT10;
DROP TABLE ZIPCODE7;

SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME='ORDER10';

CREATE TABLE ZIPCODE10 (
        ZIPCODE number(6) not null constraint PK_ZIPCODE10_ZIPCODE Primary key, 
        si_do varchar2(200) not null, 
        gu_gun varchar2(200) not null, 
        bungi varchar2(200) not null
) ; 

CREATE TABLE MEMBER10 (
        m_id number(4) not null constraint PK_MEMBER10_M_ID primary key, 
        pass varchar2(200) not null , 
        name varchar2(200) not null, 
        email varchar2(200) not null , 
        zipcode number(6) null , 
        -- Foreign Key 제약 조건 추가함. : member10(zipcode)  ===> zipcode10(zipcode) 
constraint FK_MEMBER10_ZIPCODE foreign key (zipcode) references ZIPCODE10(zipcode) 
); 

create table PRODOUCT10 (
        pro_id number(6) not null constraint PK_PRODUCT10_PRO_ID primary key , 
        pro_name varchar2(200) not null, 
        pro_price number(7,2) not null , 
        pro_cnt number(4) default 0 not null 
);

CREATE TABLE ORDER10 (
    ord_id NUMBER(6) NOT NULL CONSTRAINT PK_ORDER10_ORD_ID PRIMARY KEY, 
    m_id NUMBER(4) NOT NULL,      -- FK: MEMBER10(m_id)
    pro_id NUMBER(6) NOT NULL,    -- FK: PRODUCT10(pro_id)     -- Foreign Key 2개 
    CONSTRAINT FK_ORDER10_M_ID FOREIGN KEY (m_id) REFERENCES MEMBER10(m_id), 
    CONSTRAINT FK_ORDER10_PRO_ID FOREIGN KEY (pro_id) REFERENCES PRODOUCT10(pro_id)
);

-- 각 테이블에 레코드 5개씩 넣습니다. 

-- ANSI JOIN 문을 사용해서 주문정보(Order10)테이블을 기준으로 

 -- 주문자명, 주문자메일주소, 주문자번지(시도), 주문제품명, 제품의 가격을 출력 합니다.   , 
     
 --order10, member10, zipcode10, product10
 -- Insert into ZIPCODE10 table

INSERT INTO ZIPCODE10 (ZIPCODE, SI_DO, GU_GUN, BUNGI)
VALUES (7045,'서울','강동구','12번지');

INSERT INTO ZIPCODE10 (ZIPCODE, SI_DO, GU_GUN, BUNGI)
VALUES (7013,'부산','영등포','23번지');

INSERT INTO ZIPCODE10 (ZIPCODE, SI_DO, GU_GUN, BUNGI)
VALUES (7340,'대구','긴고로','25번지');

INSERT INTO ZIPCODE10 (ZIPCODE, SI_DO, GU_GUN, BUNGI)
VALUES (6770, '인천','개포동','33번지');

INSERT INTO ZIPCODE10 (ZIPCODE, SI_DO, GU_GUN, BUNGI)
VALUES (7780, '천안', '구월동', '89번지');

-- MEMBER 10 테이블에는 참조 되지않지만 ZIPCODE10 테이블에는 존재하 <== RIGHT OUTER JOIN
INSERT INTO ZIPCODE10 (ZIPCODE, SI_DO, GU_GUN, BUNGI)
VALUES (60, '인천','개포동','33번지');

INSERT INTO ZIPCODE10 (ZIPCODE, SI_DO, GU_GUN, BUNGI)
VALUES (70, '천안', '구월동', '89번지');

COMMIT;

INSERT INTO PRODOUCT10 (PRO_ID, PRO_NAME, PRO_PRICE, PRO_CNT)
VALUES (700025, '비타민E', 5000.25, 2057);

INSERT INTO PRODOUCT10 (PRO_ID, PRO_NAME, PRO_PRICE, PRO_CNT)
VALUES (500688, '비타민C', 2000.21, 2088);

INSERT INTO PRODOUCT10 (PRO_ID, PRO_NAME, PRO_PRICE, PRO_CNT)
VALUES (888505, '비타민D', 2008.45, 2098);

INSERT INTO PRODOUCT10 (PRO_ID, PRO_NAME, PRO_PRICE, PRO_CNT)
VALUES (998785, '비타민A', 2060.87, 2580);

INSERT INTO PRODOUCT10 (PRO_ID, PRO_NAME, PRO_PRICE, PRO_CNT)
VALUES (885468, '비타민F', 2290.11, 2022);

--주문 정보에는 없는 제품 (주문되지 않는 제품 ) <== RIGHT OUTER JOIN 

INSERT INTO PRODOUCT10 (PRO_ID, PRO_NAME, PRO_PRICE, PRO_CNT)
VALUES (600, '망고', 35000, 400);

INSERT INTO PRODOUCT10 (PRO_ID, PRO_NAME, PRO_PRICE, PRO_CNT)
VALUES (700, '대추', 5000, 500);

 COMMIT;
 
-- Insert into MEMBER10 table

INSERT INTO MEMBER10 (M_ID, PASS, NAME, EMAIL, ZIPCODE)
VALUES (1234,'B1234', '젤리', 'CK@NAVER.COM', 7045);

INSERT INTO MEMBER10 (M_ID, PASS, NAME, EMAIL, ZIPCODE)
VALUES (1235,'B2334','김초크', 'WOLK2@NAVER.COM',7013);

INSERT INTO MEMBER10 (M_ID, PASS, NAME, EMAIL, ZIPCODE)
VALUES (4564, 'J1234', '엘리', 'WO4@NAVER.COM', 7340);

INSERT INTO MEMBER10 (M_ID, PASS, NAME, EMAIL, ZIPCODE)
VALUES (9874, 'L1234', '홍길동', 'W242@NAVER.COM', 6770);

INSERT INTO MEMBER10 (M_ID, PASS, NAME, EMAIL, ZIPCODE)
VALUES (2635, 'Q1234', '홍길순', '12LK2@NAVER.COM', 7780);

COMMIT;

-- Insert into ORDER10 table

INSERT INTO ORDER10 (ORD_ID, M_ID, PRO_ID)
VALUES (100011,1234,700025);

INSERT INTO ORDER10 (ORD_ID, M_ID, PRO_ID)
VALUES (456879,1235,500688);

INSERT INTO ORDER10 (ORD_ID, M_ID, PRO_ID)
VALUES (225687,4564,888505);

INSERT INTO ORDER10 (ORD_ID, M_ID, PRO_ID)
VALUES (333333,9874,998785);

INSERT INTO ORDER10 (ORD_ID, M_ID, PRO_ID)
VALUES (455666,2635,885468);


COMMIT;

INSERT INTO MEMBER10(M_ID,PASS,NAME,EMAIL,ZIPCODE)
VALUES(6,'1234','성길동','FFF@AAA.COM',40);

INSERT INTO MEMBER10(M_ID,PASS,NAME,EMAIL,ZIPCODE)
VALUES(7,'2345','홍길동','EEE@AAA.COM'20);

SELECT NAME,EMAIL,SI_DO,PRONAME,PRO_PRICE
FROM ORDER10
JOIN MEMBER10
ON O.M_ID=M.M_ID
JOIN PRODOUCT10
ON O.PRO_ID=P.PRO_ID
JOIN ZIPCODE10
ON M.ZIPCODE = Z.ZIPCODE;

-- 모델링 되지않는 주문테이블 < ==ORDER11

CREATE TABLE ORDER11(
O_ID NUMBER (6) NOT NULL PRIMARY KEY,
M_NAME VARCHAR2(200) NOT NULL,   -- 주문자 이름
M_PHONE VARCHAR2(200) NOT NULL,  -- 주문자 번호 ,
M_ADDR VARCHAR2(200) NOT NULL,   -- 주문자의 배송주소
M_EMAIL VARCHAR2(200) NULL,      -- 주문자의 메일주소
P_ID NUMBER (6) NOT NULL,  -- 제품번호
P_NAME VARCHAR2(200) NOT NULL,  -- 제품이름
P_PRICE NUMBER(7,2) NOT NULL,  -- 제품가격
P_CNT NUMBER(6) NULL  -- 제품수량
);

INSERT INTO ORDER11 (O_ID,M_NAME,M_PHONE,M_ADDR,M_EMAIL,P_ID,P_NAME,P_PRICE,P_CNT)
VALUES (10,'홍길동','010-3223-4445','서울','AAA@AAA.COM',100,'사과',1500,100);


INSERT INTO ORDER11 (O_ID,M_NAME,M_PHONE,M_ADDR,M_EMAIL,P_ID,P_NAME,P_PRICE,P_CNT)
VALUES (20,'김길동','010-2222-4445','부산','BBA@AAA.COM',200,'수박',2000,200);

COMMIT;

SELECT * FROM ORDER11;

-- ZOIN :ANSI JOIN,
-- INNER JOIN : ON절에 공통의 값만 출력한다
-- LEFT OUTER JOIN: 왼쪽테이블의 모든내용
-- RIGHT OUTER JOIN : 오른쪽의모든내용 출력
SELECT *
FROM MEMBER10 M
JOIN ZIPCODE10 Z
ON M.ZIPCODE = Z.ZIPCODE;

-- MEMBER10(다) ,ZIPCODE (1)테이블

-- MEMBER10 에는 ON 절에 매칭되지 않더라도 오른쪽 테이블 에 있는 모든값은 출력한다.  :RIGHT OUTER JOIN 

SELECT *
FROM MEMBER10 M
RIGHT OUTER JOIN ZIPCODE10 Z
ON M.ZIPCODE = Z.ZIPCODE;

-- 주문 테이블 (ORDER10) ,주문자번호 ( MEMBER10) , <====ON M_ID


SELECT *
FROM MEMBER10 M
LEFT OUTER JOIN ZIPCODE10 Z
ON M.ZIPCODE = Z.ZIPCODE;

SELECT * 
FORM ORDER10;

SELECT *
FROM ORDER10 O
JOIN MEMBER10 M
ON O.M_ID = M.M_ID ;

-- 3배 테이블 로만 : ORDER11,ZIPCODE 11

SELECT *
FROM ORDER10 O
JOIN MEMBER10 M
ON O.M_ID=M.M_ID
JOIN ZIPCODE10 Z
ON M.ZIPCODE = Z.ZIPCODE;

-- 4개 테이블 조인  :ORDER10,MEMBER10,ZIPCODE10,PRODUCT10

SELECT *
FROM ORDER10 O
JOIN MEMBER10 M
ON O.M_ID=M.M_ID
JOIN ZIPCODE10 Z
ON M.ZIPCODE = Z.ZIPCODE
JOIN PRODOUCT10 P
ON O.PRO_ID = P.PRO_ID;

-- FULL OUTER JOIN ,RIGHT OUTER JOIN  ,LEFT OUTER JOIN 

-- RIGHT OUTER JOIN 주문하지 않는 사용자 정보도 출력 , 판매되지 않는 제품도 OUTER JOIN 을 사용해서 출력

SELECT *
FROM ORDER10 O
RIGHT OUTER JOIN MEMBER10 M
ON O.M_ID=M.M_ID
RIGHT OUTER JOIN ZIPCODE10 Z
ON M.ZIPCODE = Z.ZIPCODE
RIGHT OUTER JOIN PRODOUCT10 P
ON O.PRO_ID = P.PRO_ID;

-- FULL OTER JOIN

SELECT *
FROM ORDER10 O
FULL OUTER JOIN MEMBER10 M
ON O.M_ID=M.M_ID
FULL OUTER JOIN ZIPCODE10 Z
ON M.ZIPCODE = Z.ZIPCODE
FULL OUTER JOIN PRODOUCT10 P
ON O.PRO_ID = P.PRO_ID;

-- LEGFT OUTER JOIN

SELECT *
FROM ORDER10 O
LEFT OUTER JOIN MEMBER10 M
ON O.M_ID=M.M_ID
LEFT OUTER JOIN ZIPCODE10 Z
ON M.ZIPCODE = Z.ZIPCODEL
LEFT OUTER JOIN PRODOUCT10 P
ON O.PRO_ID = P.PRO_ID;

